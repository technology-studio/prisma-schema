import { type CommandModule } from 'yargs'
import {
  existsSync, writeFileSync, readFileSync, realpathSync,
} from 'fs'
import {
  resolve, dirname,
} from 'path'

import { loadSchemaAndProcessImports } from '../Api/ImportProcessor'
import { processAutoRemove } from '../Api/AutoRemoveProcessor'
import { processAbstracts } from '../Api/AbstractsProcessor'
import { processInheritance } from '../Api/InheritanceProcess'
import { processExtensions } from '../Api/ExtensionsProcessor'
import { processAttributeOverride } from '../Api/AttributeOverrideProcessor'
import { processAttributeRemove } from '../Api/AttributeRemoveProcessor'

const processPrismaSchema = (schema: string): string => {
  schema = processExtensions(schema)
  schema = processAttributeRemove(schema)
  schema = processAttributeOverride(schema)
  schema = processInheritance(schema)
  schema = processAutoRemove(schema)
  schema = processAbstracts(schema)
  return schema
}

export type ProcessCommandAttributes = {
  sourceFile: string,
  outputFile?: string,
  force: boolean,
}

const reduceWhitespaces = (schema: string): string => (
  schema.replace(/[\s]+/g, ' ')
)

const areEqual = (left: string, right: string): boolean => reduceWhitespaces(left) === reduceWhitespaces(right)
const process = ({ sourceFile, outputFile, force }: ProcessCommandAttributes): void => {
  const outputPath = resolve(outputFile ?? './prisma/schema.prisma')
  const outputDir = dirname(outputPath)
  if (!existsSync(outputDir)) {
    // eslint-disable-next-line no-console
    console.error(
      `Directory ${outputDir} does not exist. If you don't specify --output-file the CLI defaults to ./prisma/schema.prisma`,
    )
  }

  let schema = loadSchemaAndProcessImports(realpathSync(sourceFile))

  schema = (
    `// This file was generated by @txo/prisma-schema (https://www.npmjs.com/package/@txo/prisma-schema)\n${
    processPrismaSchema(schema)}`
  )

  if (existsSync(outputPath)) {
    const previousSchema = readFileSync(outputPath, 'utf-8')
    if (areEqual(previousSchema, schema) && !force) {
      // eslint-disable-next-line no-console
      console.log('schema unchanged')
      return
    }
  }
  writeFileSync(outputPath, schema, 'utf-8')
  // eslint-disable-next-line no-console
  console.log(`File ${outputPath} created.`)
}

export const processCommand: CommandModule = {
  command: 'process <source-file> [--output-file] [--force]',
  aliases: ['m'],
  describe: 'Processes a prisma source schema',
  builder: (yargs) => yargs
    .positional('source-file', {
      describe: 'Source file',
      type: 'string',
    })
    .option('output-file', {
      alias: 'o',
      describe: 'Output file',
      string: true,
    })
    .option('force', {
      alias: 'f',
      describe: 'Force generation of file, even schema contains whitespace changes',
      boolean: true,
      default: false,
    }),
  handler: attributes => {
    try {
      process(attributes as unknown as ProcessCommandAttributes)
    } catch (error) {
      // Error
      // eslint-disable-next-line no-console
      console.error(error)
    }
  },
}
